{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# The only thing you need to change"],"metadata":{"id":"1FEgfyF9_7vs"}},{"cell_type":"markdown","source":["*   preditions for 12 months, CI data frames will be crated in the output dir\n","*   RMSE and RMSE/range will be outputed in data_errors.csv\n","*   list of Merchants for which the ARIMA set up the way it is set up run into problems will be outputed into creashed.csv\n","\n"],"metadata":{"id":"hltnOaE0BfVr"}},{"cell_type":"code","source":["data_source = '/content/drive/MyDrive/07 - Six - Team only/Raw data copy/Time_Series_Merchants_Transactions_Anonymized.csv'"],"metadata":{"id":"YonEQf6f_6X7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["output_dir = '/content/drive/MyDrive/07 - Six - Team only/Processed data/random_test/'"],"metadata":{"id":"4Y9A7lHPALVU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["this should be done automatically from data"],"metadata":{"id":"LQJ6Cbh_35bj"}},{"cell_type":"code","source":["data_start = '2020-08'\n","data_end = '2022-10'"],"metadata":{"id":"FMszjz-DAtJd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Installation"],"metadata":{"id":"9h5Z34Zgu4OJ"}},{"cell_type":"code","source":["!pip3 install pmdarima"],"metadata":{"id":"aRXiw4g47Jum","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667895638894,"user_tz":-60,"elapsed":12760,"user":{"displayName":"Alžbeta Bohiniková","userId":"13542245319836769641"}},"outputId":"3e8e8eb0-3f8a-4d0d-a913-a9a7ac54801d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pmdarima\n","  Downloading pmdarima-2.0.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (1.8 MB)\n","\u001b[K     |████████████████████████████████| 1.8 MB 4.0 MB/s \n","\u001b[?25hRequirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (57.4.0)\n","Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (1.21.6)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (1.24.3)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (0.29.32)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (1.2.0)\n","Collecting statsmodels>=0.13.2\n","  Downloading statsmodels-0.13.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.9 MB)\n","\u001b[K     |████████████████████████████████| 9.9 MB 41.6 MB/s \n","\u001b[?25hRequirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (1.7.3)\n","Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (1.3.5)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.7/dist-packages (from pmdarima) (1.0.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.19->pmdarima) (2022.5)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.19->pmdarima) (1.15.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.22->pmdarima) (3.1.0)\n","Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.7/dist-packages (from statsmodels>=0.13.2->pmdarima) (0.5.3)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.7/dist-packages (from statsmodels>=0.13.2->pmdarima) (21.3)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=21.3->statsmodels>=0.13.2->pmdarima) (3.0.9)\n","Installing collected packages: statsmodels, pmdarima\n","  Attempting uninstall: statsmodels\n","    Found existing installation: statsmodels 0.12.2\n","    Uninstalling statsmodels-0.12.2:\n","      Successfully uninstalled statsmodels-0.12.2\n","Successfully installed pmdarima-2.0.1 statsmodels-0.13.5\n"]}]},{"cell_type":"markdown","source":["# Loading libraries"],"metadata":{"id":"H-CMAKDxuuM7"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HbMeoz9mj8xj","executionInfo":{"status":"ok","timestamp":1667907114815,"user_tz":-60,"elapsed":23070,"user":{"displayName":"Alžbeta Bohiniková","userId":"13542245319836769641"}},"outputId":"b0c07b00-6764-4427-d7f2-d2dbc2df7650"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3ckmpZ-nhzEz"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import scipy\n","from datetime import datetime\n","from pmdarima.arima import auto_arima\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","source":["# Functions"],"metadata":{"id":"p7wXeA5M6y5q"}},{"cell_type":"code","source":["def calc_error(y,y_hat,method='MAE', normalized=False):\n","  # y true values\n","  # y_hat predicted\n","  # method can be MAE or RMSE\n","  # normalized can be False, avarage, range, iqr\n","  if method == 'MAE':\n","    error_metric = np.mean((np.abs(y_hat - y)))\n","  else:\n","    error_metric = np.sqrt(np.mean((y_hat - y)**2))\n","  if normalized == False:\n","    return error_metric\n","  else:\n","    return normalize_error(y,error_metric,normalized)"],"metadata":{"id":"aQo3Ub_UOwxb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def normalize_error(y,metric,method):\n","  # method = avarage, range, iqr\n","  if method == 'average':\n","    metric = metric/y.mean()\n","  elif method == 'range':\n","    metric = metric/(y.max()-y.min())\n","  else:\n","    metric = metric/scipy.stats.iqr(y)\n","  return metric\n"],"metadata":{"id":"5GqdsyvOPwpw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run_arima(merchant, merchant_name):\n","  # merchant is a df created from row of a data frame we read\n","  merchant['month_index'] = merchant.index.month\n","  \n","  #train test split, since arima runs on min 21, we used that for train, and whatever is left for test\n","  train = pd.DataFrame({merchant_name : merchant[merchant_name][:21].values,\n","                      'Month' : merchant[merchant_name][:21].index})\n","  train = train.set_index('Month')\n","  train['month_index'] = train.index.month\n","  \n","  test = pd.DataFrame({merchant_name : merchant[merchant_name][21:].values,\n","                      'Month' : merchant[merchant_name][21:].index})\n","  test = test.set_index('Month')\n","  test['month_index'] = test.index.month\n","  \n","  # find best hyperparameters and fit the model\n","  model = auto_arima(train[[merchant_name]], exogenous=train[['month_index']],\n","                   start_p=1, \n","                   max_p=3,\n","                   start_q=1, \n","                   max_q=3,\n","                   d=None,\n","                   max_d=2,\n","                   start_P=1,\n","                   max_P=2,\n","                   start_Q=1,\n","                   max_Q=2,\n","                   D=0,\n","                   max_D=2,\n","                   m=12,  \n","                   seasonal=True,\n","                   test='adf',\n","                   trace=False,\n","                   error_action='ignore',  \n","                   suppress_warnings=True, \n","                   stepwise=True)\n","  \n","  # validation: predict on the test data\n","  n_periods = len(test)\n","  df = train.copy(deep=True)\n","  \n","  fitted, confint = model.predict(n_periods=n_periods, \n","                                  return_conf_int=True,\n","                                  exogenous=test[['month_index']])\n","  \n","  rmse = calc_error(test[merchant_name].values, fitted.values,method = 'RMSE')\n","  norm_rmse = calc_error(test[merchant_name].values, fitted.values,method = 'RMSE', normalized = 'range')\n","  \n","  # 12 month prediction\n","  # fit the model\n","  model_final = auto_arima(merchant[[merchant_name]], exogenous=merchant[['month_index']],\n","                           start_p=1, \n","                           max_p=3,\n","                           start_q=1, \n","                           max_q=3,\n","                           d=None,\n","                           max_d=2,\n","                           start_P=1,\n","                           max_P=2,\n","                           start_Q=1,\n","                           max_Q=2,\n","                           D=0,\n","                           max_D=2,\n","                           m=12,  \n","                           seasonal=True,\n","                           test='adf',\n","                           trace=False,\n","                           error_action='ignore',  \n","                           suppress_warnings=True, \n","                           stepwise=True)\n","  \n","  # time frame for forecasting\n","  forecast_df = pd.DataFrame({\"month_index\":pd.date_range(merchant.index[-1], periods = 12, freq='MS').month},\n","                    index = pd.date_range(merchant.index[-1] + pd.DateOffset(months=1), periods = 12, freq='MS'))\n","  \n","  prediction, confint_pred = model_final.predict(n_periods=12, \n","                                        return_conf_int=True,\n","                                        exogenous=forecast_df[['month_index']])\n","  \n","  return prediction, confint_pred, rmse, norm_rmse\n"],"metadata":{"id":"oIyg8MSp62Tx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run_all(data, dates, file_path):\n","  # data is the whole data frame\n","  # dates = time range in months\n","\n","  # initializing necessary data\n","  data_predictions = pd.DataFrame({})\n","  data_CI_width = pd.DataFrame({})\n","  data_lower = pd.DataFrame({})\n","  data_upper = pd.DataFrame({})\n","  all_rmse = []\n","  all_norm_rmse = []\n","  crashes = []\n","  working = []\n","\n","  # running auto ARIMA for every row\n","  for i in data.index:\n","    df = pd.DataFrame({str(i) : data.loc[i].values,\n","                       'Month' : dates})\n","    df['Month'] = pd.to_datetime(df['Month'],infer_datetime_format=True)\n","    df = df.set_index(['Month'])\n","    \n","    # try, except for the prevention if the auto ARIMA does not work\n","    # for some merchants\n","    try:\n","      predictions, CI, RMSE, norm_RMSE = run_arima(df, i)\n","      data_predictions[i] = predictions\n","      data_lower[i] = [item[0] for item in CI]\n","      data_upper[i] = [item[1] for item in CI]\n","      data_CI_width[i] = data_upper[i].values - data_lower[i].values\n","      all_rmse.append(RMSE)\n","      all_norm_rmse.append(norm_RMSE)\n","      working.append(i)\n","    except:\n","      crashes.append(i)\n","\n","  # preparing the output data\n","  data_CI_width['Month'] = data_predictions.index\n","  data_lower['Month'] = data_predictions.index\n","  data_upper['Month'] = data_predictions.index\n","  \n","  data_CI_width = data_CI_width.set_index(['Month'])\n","  data_lower = data_lower.set_index(['Month'])\n","  data_upper = data_upper.set_index(['Month'])\n","\n","  errors = pd.DataFrame({\"Merchant\":working,\n","                         'rmse':all_rmse,\n","                         'norm_rmse':all_norm_rmse})\n","  \n","  # saving the data to files\n","  data_predictions.to_csv(file_path+'data_predictions.csv')\n","  data_CI_width.to_csv(file_path+'data_CI_width.csv')\n","  data_lower.to_csv(file_path+'data_lower.csv')\n","  data_upper.to_csv(file_path+'data_upper.csv')\n","  errors.to_csv(file_path+'data_errors.csv')\n","\n","  with open(file_path+'crashed.csv', 'w') as f:\n","    for line in crashes:\n","        f.write(f\"{line}\\n\")\n","\n","  return"],"metadata":{"id":"4WGTkmSv8v2S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run_arima_with_plots(merchant, merchant_name, file_path):\n","  # merchant is a df created from row of a data frame we read\n","  merchant['month_index'] = merchant.index.month\n","  \n","  #train test split, since arima runs on min 21, we used that for train, and whatever is left for test\n","  train = pd.DataFrame({merchant_name : merchant[merchant_name][:21].values,\n","                      'Month' : merchant[merchant_name][:21].index})\n","  train = train.set_index('Month')\n","  train['month_index'] = train.index.month\n","  \n","  test = pd.DataFrame({merchant_name : merchant[merchant_name][21:].values,\n","                      'Month' : merchant[merchant_name][21:].index})\n","  test = test.set_index('Month')\n","  test['month_index'] = test.index.month\n","  \n","  # find best hyperparameters and fit the model\n","  model = auto_arima(train[[merchant_name]], exogenous=train[['month_index']],\n","                   start_p=1, \n","                   max_p=3,\n","                   start_q=1, \n","                   max_q=3,\n","                   d=None,\n","                   max_d=2,\n","                   start_P=1,\n","                   max_P=2,\n","                   start_Q=1,\n","                   max_Q=2,\n","                   D=1,\n","                   max_D=2,\n","                   m=12,  \n","                   seasonal=True,\n","                   test='adf',\n","                   trace=False,\n","                   error_action='ignore',  \n","                   suppress_warnings=True, \n","                   stepwise=True)\n","  \n","  # validation: predict on the test data\n","  n_periods = len(test)\n","  df = train.copy(deep=True)\n","  \n","  fitted, confint = model.predict(n_periods=n_periods, \n","                                  return_conf_int=True,\n","                                  exogenous=test[['month_index']])\n","  \n","  rmse = calc_error(test[merchant_name].values, fitted.values,method = 'RMSE')\n","  norm_rmse = calc_error(test[merchant_name].values, fitted.values,method = 'RMSE', normalized = 'range')\n","\n","  ###### output train, test data\n","  data_train_predictions = fitted\n","  data_train_lower = [item[0] for item in confint]\n","  data_train_upper = [item[1] for item in confint]\n","\n","  with open(file_path+'data_train_predictions.csv', 'w') as f:\n","    for line in data_train_predictions:\n","        f.write(f\"{line}\\n\")\n","\n","  with open(file_path+'data_train_lower.csv', 'w') as f:\n","    for line in data_train_lower:\n","        f.write(f\"{line}\\n\")\n","\n","  with open(file_path+'data_train_upper.csv', 'w') as f:\n","    for line in data_train_upper:\n","        f.write(f\"{line}\\n\")\n","  ##############################\n","  \n","  # 12 month prediction\n","  # fit the model\n","  model_final = auto_arima(merchant[[merchant_name]], exogenous=merchant[['month_index']],\n","                           start_p=1, \n","                           max_p=3,\n","                           start_q=1, \n","                           max_q=3,\n","                           d=None,\n","                           max_d=2,\n","                           start_P=1,\n","                           max_P=2,\n","                           start_Q=1,\n","                           max_Q=2,\n","                           D=1,\n","                           max_D=2,\n","                           m=12,  \n","                           seasonal=True,\n","                           test='adf',\n","                           trace=False,\n","                           error_action='ignore',  \n","                           suppress_warnings=True, \n","                           stepwise=True)\n","  \n","  ##########################\n","\n","  # getting prediction, for the historical data, to get test error\n","  prediction_test, confint_pred_test = model_final.predict(n_periods=26, \n","                                        return_conf_int=True,\n","                                        exogenous=merchant[['month_index']])\n","  \n","  ###### output files\n","  data_test_predictions = prediction_test\n","  data_test_lower = [item[0] for item in confint_pred_test]\n","  data_test_upper = [item[1] for item in confint_pred_test]\n","\n","  with open(file_path+'data_test_predictions.csv', 'w') as f:\n","    for line in data_test_predictions:\n","        f.write(f\"{line}\\n\")\n","\n","  with open(file_path+'data_test_lower.csv', 'w') as f:\n","    for line in data_test_lower:\n","        f.write(f\"{line}\\n\")\n","\n","  with open(file_path+'data_test_upper.csv', 'w') as f:\n","    for line in data_test_upper:\n","        f.write(f\"{line}\\n\")\n","\n","  ##############################\n","\n","\n","  ##########################\n","  \n","  # time frame for forecasting\n","  forecast_df = pd.DataFrame({\"month_index\":pd.date_range(merchant.index[-1], periods = 12, freq='MS').month},\n","                    index = pd.date_range(merchant.index[-1] + pd.DateOffset(months=1), periods = 12, freq='MS'))\n","  \n","  prediction, confint_pred = model_final.predict(n_periods=12, \n","                                        return_conf_int=True,\n","                                        exogenous=forecast_df[['month_index']])\n","  \n","  ################################################\n","  # Plot - just to check at the beginning\n","  \n","  # make series for plotting purpose\n","  lower_series = pd.Series(confint[:, 0], index=test.index)\n","  upper_series = pd.Series(confint[:, 1], index=test.index)\n","  \n","  plt.figure(figsize=(15,7))\n","  plt.plot(df[merchant_name], color='#1f76b4')\n","  plt.plot(fitted, color='darkgreen')\n","  plt.plot(test[merchant_name], color='#1f76b4')\n","  plt.fill_between(lower_series.index, \n","                  lower_series, \n","                  upper_series, \n","                  color='k', alpha=.15)\n","  \n","  plt.title(\"Train-Test validation for \"+str(merchant_name))\n","  #plt.show()\n","  # here save, instead of show\n","  # name by merchants\n","  #plt.draw()\n","  plt.savefig(file_path+'train_test_'+str(merchant_name)+'.png')\n","  \n","  print('Test RMSE: %.3f' % rmse)\n","  \n","  # Plot prediction\n","  index_of_fc = pd.date_range(merchant.index[-1] + pd.DateOffset(months=1), periods = 12, freq='MS')\n","  \n","  # make series for plotting purpose\n","  lower_series = pd.Series(confint_pred[:, 0], index=index_of_fc)\n","  upper_series = pd.Series(confint_pred[:, 1], index=index_of_fc)\n","  \n","  # Plot\n","  plt.figure(figsize=(15,7))\n","  plt.plot(merchant[merchant_name], color='#1f76b4')\n","  plt.plot(prediction, color='darkgreen')\n","  plt.fill_between(lower_series.index, \n","                  lower_series, \n","                  upper_series, \n","                  color='k', alpha=.15)\n","  \n","  plt.title(\"Forecast of Transactions for \"+str(merchant_name))\n","  #plt.show()\n","  #plt.draw()\n","  plt.savefig(file_path+'forecast_'+str(merchant_name)+'.png')\n","##################################################\n","\n","  \n","  return prediction, confint_pred, rmse, norm_rmse\n"],"metadata":{"id":"M9lpQOmR5Q3Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run_all_with_plots(data, dates, file_path):\n","  # data is the whole data frame\n","  # dates = time range in months\n","\n","  # initializing necessary data\n","  data_predictions = pd.DataFrame({})\n","  data_CI_width = pd.DataFrame({})\n","  data_lower = pd.DataFrame({})\n","  data_upper = pd.DataFrame({})\n","  all_rmse = []\n","  all_norm_rmse = []\n","  crashes = []\n","  working = []\n","\n","  # running auto ARIMA for every row\n","  for i in data.index:\n","    df = pd.DataFrame({str(i) : data.loc[i].values,\n","                       'Month' : dates})\n","    df['Month'] = pd.to_datetime(df['Month'],infer_datetime_format=True)\n","    df = df.set_index(['Month'])\n","    \n","    # try, except for the prevention if the auto ARIMA does not work\n","    # for some merchants\n","    try:\n","      predictions, CI, RMSE, norm_RMSE = run_arima_with_plots(df, i, file_path)\n","      data_predictions[i] = predictions\n","      data_lower[i] = [item[0] for item in CI]\n","      data_upper[i] = [item[1] for item in CI]\n","      data_CI_width[i] = data_upper[i].values - data_lower[i].values\n","      all_rmse.append(RMSE)\n","      all_norm_rmse.append(norm_RMSE)\n","      working.append(i)\n","    except:\n","      crashes.append(i)\n","\n","  # preparing the output data\n","  data_CI_width['Month'] = data_predictions.index\n","  data_lower['Month'] = data_predictions.index\n","  data_upper['Month'] = data_predictions.index\n","  \n","  data_CI_width = data_CI_width.set_index(['Month'])\n","  data_lower = data_lower.set_index(['Month'])\n","  data_upper = data_upper.set_index(['Month'])\n","\n","  errors = pd.DataFrame({\"Merchant\":working,\n","                         'rmse':all_rmse,\n","                         'norm_rmse':all_norm_rmse})\n","  \n","  # saving the data to files\n","  data_predictions.to_csv(file_path+'data_predictions.csv')\n","  data_CI_width.to_csv(file_path+'data_CI_width.csv')\n","  data_lower.to_csv(file_path+'data_lower.csv')\n","  data_upper.to_csv(file_path+'data_upper.csv')\n","  errors.to_csv(file_path+'data_errors.csv')\n","\n","  with open(file_path+'crashed.csv', 'w') as f:\n","    for line in crashes:\n","        f.write(f\"{line}\\n\")\n","\n","  return"],"metadata":{"id":"DoBchgaZ5x0m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Load Data"],"metadata":{"id":"0cfO6BeM6vih"}},{"cell_type":"markdown","source":["we might need something to work for xlxs or csv"],"metadata":{"id":"n4o5SZ0J3s3_"}},{"cell_type":"code","source":["dates = pd.date_range(start=data_start, end=data_end, freq=\"M\")"],"metadata":{"id":"ZK_bhF6Rh4bW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#data = pd.read_excel(data_source)\n","data = pd.read_csv(data_source)"],"metadata":{"id":"3RtFwlCxi0W2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = data.set_index('Merchant Name')"],"metadata":{"id":"QTooR_e4k45x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.columns = dates"],"metadata":{"id":"nUhD_iVRotCg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Add sum"],"metadata":{"id":"CpwQVHdl2wjV"}},{"cell_type":"code","source":["data.loc['total'] = data.sum()"],"metadata":{"id":"KDcU6WYp21Yw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Running ARIMA for all"],"metadata":{"id":"F6fWEtfb7hZh"}},{"cell_type":"code","source":["#for selected rows\n","#run_all(data.iloc[:2], dates, output_dir)"],"metadata":{"id":"_ZJWbfqFnFzy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#run_all(data, dates, output_dir)"],"metadata":{"id":"c1buT3WmCy1Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# with plots, just totals\n","run_all_with_plots(data.iloc[(len(data)-1):], dates, output_dir)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":888},"id":"YeidtBvk6AGL","executionInfo":{"status":"ok","timestamp":1667896461500,"user_tz":-60,"elapsed":5767,"user":{"displayName":"Alžbeta Bohiniková","userId":"13542245319836769641"}},"outputId":"fcaedb47-9951-4689-8589-dc7f74c0bc93"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test RMSE: 624240.969\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}